//
//  LKCStyleKit.m
//  OctoberBaby
//
//  Created by thuai on 14-7-6.
//  Copyright (c) 2014 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "LKCStyleKit.h"


@implementation LKCStyleKit

#pragma mark Cache

static UIColor* _naviTitleColor = nil;
static UIColor* _inputBgColor = nil;
static UIColor* _tabBarTitleColor = nil;
static UIColor* _borderColor = nil;
static UIColor* _tabbarTint = nil;
static UIColor* _tocoResetColor = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _naviTitleColor = [UIColor colorWithRed: 0.671 green: 0.447 blue: 0.78 alpha: 1];
    _inputBgColor = [UIColor colorWithRed: 0.961 green: 0.957 blue: 0.902 alpha: 1];
   // _tabBarTitleColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    _tabBarTitleColor = [UIColor colorWithRed: 210.0/255.0 green: 210.0/255.0 blue: 210.0/255.0 alpha: 1.0];
    _borderColor = [UIColor colorWithRed: 1 green: 0.733 blue: 0.269 alpha: 1];
    _tabbarTint = [UIColor colorWithRed: 0.937 green: 0.937 blue: 0.937 alpha: 1];

    _tocoResetColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:1];
}

#pragma mark Colors

+ (UIColor*)naviTitleColor { return _naviTitleColor; }
+ (UIColor*)inputBgColor { return _inputBgColor; }
+ (UIColor*)tabBarTitleColor { return _tabBarTitleColor; }
+ (UIColor*)borderColor { return _borderColor; }
+ (UIColor*)tabbarTint { return _tabbarTint; }
+ (UIColor*)tocooResetColor { return _tocoResetColor; }

#pragma mark Drawing Methods

+ (void )drawManual_fetalWithFrame: (CGRect)frame
{
    //// Bezier Drawing 画贝塞尔曲线
//    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
//    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 6.63, CGRectGetMinY(frame) + 2.26)];
//    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 1.97, CGRectGetMinY(frame) + 0.94)];
//    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 1.97, CGRectGetMinY(frame) + 12.49)];
//    [bezierPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 6.63, CGRectGetMinY(frame) + 10.88)];
////     [RGBA(54, 209, 217, 1) setStroke];
////     bezierPath.lineWidth = 2;
////    [bezierPath stroke];
//    
//    CAShapeLayer * pathLayer = [CAShapeLayer layer];
//    pathLayer.fillColor = [UIColor clearColor].CGColor;
//    pathLayer.path = bezierPath.CGPath;
//    pathLayer.strokeColor = RGBA(54, 209, 217, 1).CGColor;
//    pathLayer.lineWidth = 2.0f;
//    
//    return pathLayer;
    //     CGPathRelease(bezierPath.CGPath);
    //    CFRelease((__bridge CFTypeRef)(bezierPath));
    
        CGContextRef context = UIGraphicsGetCurrentContext();
        CGContextSetLineWidth(context, 2);//指定线宽
        CGContextSetRGBStrokeColor(context,0.21, 0.82, 0.85, 1.0);
//    CGContextSetStrokeColorWithColor(context,RGBA(255/255, 0/255, 0/255, 1.0).CGColor);
//        CGContextSetRGBFillColor(context, 54/255, 209/255, 217/255, 1.0);//设置填充颜色
//    CGContextSetRGBStrokeColor(context, 54/255, 209/255, 217/255, 1.0);
//     CGContextSetRGBStrokeColor(context, 54/255, 209/255, 217/255, 1.0);
        CGContextMoveToPoint(context, CGRectGetMinX(frame) + 6.63, CGRectGetMinY(frame) + 2.26);//设置Path的起点
    //    CGContextAddQuadCurveToPoint(context,190, 310, 120, 390);
    
        CGPoint sPoints[4];//坐标点
       sPoints[0] = CGPointMake(CGRectGetMinX(frame) + 6.63, CGRectGetMinY(frame) + 2.26);
        sPoints[1] =CGPointMake(CGRectGetMinX(frame) + 1.97, CGRectGetMinY(frame) + 0.94);//坐标1
        sPoints[2] =CGPointMake(CGRectGetMinX(frame) + 1.97, CGRectGetMinY(frame) + 12.49);//坐标2
        sPoints[3] =CGPointMake(CGRectGetMinX(frame) + 6.63, CGRectGetMinY(frame) + 10.88);//坐标2
        CGContextAddLines(context, sPoints, 4);//添加线
    //    CGContextClosePath(context);//封起来
    //    CGContextDrawPath(context, kCGPathFillStroke); //根据坐标绘制路径
    
        CGContextStrokePath(context);
    
}

+ (void)drawAuto_fetalWithFrame: (CGRect)frame;
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + 1, CGRectGetMinY(frame) + 1, 3.02, 16)];
    [LKCStyleKit.naviTitleColor setFill];
    [rectanglePath fill];
}

+ (void)drawTocoResetWithFrame : (CGRect)frame;
{

    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetLineWidth(context, 2);//指定线宽
    CGContextSetRGBStrokeColor(context, 0.24, 0.74, 0.98, 1.0);//设置填充颜色    CGContextMoveToPoint(context,CGRectGetMinX(frame) - 1, CGRectGetMinY(frame) - 2);
    CGPoint sPoints[2];//坐标点
    sPoints[0] = CGPointMake(CGRectGetMinX(frame) - 1,  CGRectGetMinY(frame) -2);
    sPoints[1] =CGPointMake(CGRectGetMinX(frame) - 1, CGRectGetMinY(frame) + 10);//坐标1
    CGContextAddLines(context, sPoints, 2);//添加线
    CGContextStrokePath(context);

    CGContextRef contextleft = UIGraphicsGetCurrentContext();
    CGContextSetLineWidth(contextleft, 2);//指定线宽
    CGContextSetRGBStrokeColor(contextleft, 0.24, 0.74, 0.98, 1.0);//设置填充颜色
    CGContextMoveToPoint(contextleft,CGRectGetMinX(frame) - 5, CGRectGetMinY(frame) + 3);
    CGPoint leftPoints[2];//坐标点
    leftPoints[0] = CGPointMake(CGRectGetMinX(frame) - 5,  CGRectGetMinY(frame) + 3);
    leftPoints[1] =CGPointMake(CGRectGetMinX(frame) - 5,CGRectGetMinY(frame) + 5);//坐标1
    CGContextAddLines(contextleft, leftPoints, 2);//添加线
    CGContextStrokePath(contextleft);
//
    CGContextRef contextright = UIGraphicsGetCurrentContext();
     CGContextSetLineWidth(contextright, 2);//指定线宽
   CGContextSetRGBStrokeColor(contextright, 0.24, 0.74, 0.98, 1.0);//设置填充颜色
    CGContextMoveToPoint(contextright,CGRectGetMinX(frame) + 3, CGRectGetMinY(frame) + 3);
    CGPoint rightPoints[2];//坐标点
    rightPoints[0] = CGPointMake(CGRectGetMinX(frame) + 3,  CGRectGetMinY(frame) + 3);
    rightPoints[1] =CGPointMake(CGRectGetMinX(frame) + 3,CGRectGetMinY(frame) + 5);//坐标1
    CGContextAddLines(contextright, rightPoints, 2);//添加线
    CGContextStrokePath(contextright);

   
}

@end
